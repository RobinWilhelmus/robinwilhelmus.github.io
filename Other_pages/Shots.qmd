---
format:
  html:
    #theme: cosmo
    toc: false
page-layout: full
title-block-banner: false
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r prep, echo=FALSE, message=FALSE, warning=FALSE}
library(downloadthis)
library(reactable)
library(htmltools)
library(tibble)
library(forcats)
library(tidyverse)
library(sparkline)
library(dataui)
library(knitr)
orange_pal <- function(x){
  rgb(colorRamp(c("green","white", "red"))(x), maxColorValue = 255)}

rating_cols <- c("spi", "global_o", "global_d")
group_cols <- c("group_1", "group_2", "group_3")
knockout_cols <- c("make_round_of_16", "make_quarters", "make_semis", "make_final", "win_league")
#forecasts <- forecasts[, c("team", "points", "group", rating_cols, group_cols, knockout_cols)]

rating_column <- function(maxWidth = 55, ...) {
  colDef(maxWidth = maxWidth, align = "center", class = "cell number", ...)
}

group_column <- function(class = NULL, ...) {
  colDef(cell = format_pct, maxWidth = 70, align = "center", class = paste("cell number", class), ...)
}

knockout_column <- function(maxWidth = 70, class = NULL, ...) {
  colDef(
    cell = format_pct,
    maxWidth = maxWidth,
    class = paste("cell number", class),
    style = function(value) {
      # Lighter color for <1%
      if (value < 0.01) {
        list(color = "#aaa")
      } else {
        list(color = "#111", background = knockout_pct_color(value))
      }
    },
    ...
  )
}

format_pct <- function(value) {
  if (value == 0) "  \u2013 "    # en dash for 0%
  else if (value == 1) "\u2713"  # checkmark for 100%
  else if (value < 0.01) " <1%"
  else if (value > 0.99) ">99%"
  else formatC(paste0(round(value * 100), "%"), width = 4)
}

make_color_pal <- function(colors, bias = 1) {
  get_color <- colorRamp(colors, bias = bias)
  function(x) rgb(get_color(x), maxColorValue = 255)
}

with_tooltip <- function(value, tooltip) {
  tags$abbr(style = "text-decoration: underline; text-decoration-style: dotted; cursor: help",
            title = tooltip, value)
}

off_rating_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 1.3)
def_rating_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 0.6)
knockout_pct_color <- make_color_pal(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"), bias = 2)

make_color_pal <- function(colors, bias = 1) {
  get_color <- colorRamp(colors, bias = bias)
  function(x) rgb(get_color(x), maxColorValue = 255)
}
good_color <- make_color_pal(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"), bias = 2)

#xRank <- xRank[,-2]
real_cols <- c("Rank","Logo","Team","P", "W", "D","L","GF","GA","GD","Pts")
expected_cols <- c("xGF", "xGA", "xGD","xPts","xRank", "Form")
group_column <- function(class = NULL, ...) {
  colDef(cell = format_pct, maxWidth = 70, align = "center", class = paste("cell number", class), ...)
}
```

```{r table2, out.width='100%',echo=FALSE, message=FALSE, warning=FALSE}
players <- readxl::read_excel("Export_TDL_NED_2223.xlsx", 
                           sheet = "Player xG") %>%
  select(name,playername,Minutes_played, Goals, NP_Goals, xG, NPxG, xG.90, NPxG.90, NP_Shots) 
format_pct <- function(value) {
  if (value == 0) "  \u2013 "    # en dash for 0%
  else if (value == 1) "\u2713"  # checkmark for 100%
  else if (value < 0.01) " <1%"
  else if (value > 0.99) ">99%"
  else formatC(paste0(round(value * 100), "%"), width = 4)
}


group_column <- function(class = NULL, ...) {
  colDef(cell = format_pct, maxWidth = 70, align = "center", class = paste("cell number", class), ...)
}
knockout_pct_color <- make_color_pal(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"), bias = 2)

tbl <- reactable(players,
              width = 750,
              searchable = TRUE,
              columns = list(
                name = colDef(minWidth = 40,
                              name = "",
                              cell = function(value) {
                                img_src <- knitr::image_uri(sprintf("~/Documents/ScraperWhoScored/TDLXG/resized/%s.png", value))
                                image <- img(src = img_src, height = "22px", alt = value)
                                tagList(
                                  div(style = list(display = "inline-block", width = "40px"), image)
                                )
                              }),
                playername = colDef(
                  name="",
                  align="left"
                ),
                Minutes_played = colDef(
                 name = "Minutes",
                 maxWidth = 70,
                 format = colFormat(digits = 0),
                 style = function(value) {
                   normalized <- (value - min(players$Minutes_played)) / (max(players$Minutes_played) - min(players$Minutes_played))
                   color <- knockout_pct_color(normalized)
                   
                   # div(style = list(background = color), value)
                   list(background = color)
                 }
                ),
                Goals = colDef(
                  maxWidth = 55,
                  format = colFormat(digits = 0),
                  style = function(value) {
                  normalized <- (value - min(players$Goals)) / (max(players$Goals) - min(players$Goals))
                  color <- knockout_pct_color(normalized)
                  
                 # div(style = list(background = color), value)
                  list(background = color)
                }),
                NP_Goals = colDef(
                  name = "NP Goals",
                  format = colFormat(digits = 0),
                  maxWidth = 55,
                  style = function(value) {
                  normalized <- (value - min(players$Goals)) / (max(players$Goals) - min(players$Goals))
                  color <- knockout_pct_color(normalized)
                  list(background = color)
                }),
                xG = colDef(
                  maxWidth = 55,
                  style = function(value) {
                    normalized <- (value - min(players$xG)) / (max(players$xG) - min(players$xG))
                    color <- knockout_pct_color(normalized)
                    list(background = color)
                  }),
                NPxG = colDef(
                  maxWidth = 55,
                  style = function(value) {
                    normalized <- (value - min(players$NPxG)) / (max(players$NPxG) - min(players$NPxG))
                    color <- knockout_pct_color(normalized)
                    list(background = color)
                  }),
                xG.90 = colDef(
                  name = "xG/90",
                  maxWidth = 55,
                  style = function(value) {
                    normalized <- (value - min(players$xG.90)) / (max(players$xG.90) - min(players$xG.90))
                    color <- knockout_pct_color(normalized)
                    list(background = color)
                  }),
                NPxG.90 = colDef(
                  name = "NPxG/90",
                  maxWidth = 55,
                  style = function(value) {
                    normalized <- (value - min(players$NPxG.90)) / (max(players$NPxG.90) - min(players$NPxG.90))
                    color <- knockout_pct_color(normalized)
                    list(background = color)
                  }),
                NP_Shots = colDef(
                  format = colFormat(digits = 0),
                  name = "NP Shots",
                  maxWidth = 55,
                  style = function(value) {
                    normalized <- (value - min(players$NP_Shots)) / (max(players$NP_Shots) - min(players$NP_Shots))
                    color <- knockout_pct_color(normalized)
                    list(background = color)
                  })),
              defaultColDef = colDef(
                format = colFormat(digits = 2),
                align="center",
                
              )
              )

div(class = "standings",
  div(class = "title",
    h2("Shots and xG Eredivisie 2022/2023"),
    "Table sorted on NP-Goals and NPxG"
  ),
  tbl
)

players %>%
  download_this(
    output_name = "players_goals_Eredivisie",
    output_extension = ".xlsx",
    button_label = "Download table as xlsx",
    button_type = "default",
    has_icon = TRUE,
    icon = "fa fa-save"
  )

```

```{r,echo=FALSE}
tags$link(href = "https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback", rel = "stylesheet")
```


```{css,echo=FALSE}
.standings {
  font-family: Karla, "Roboto", Helvetica, Arial, sans-serif;
  font-size: 14px;
}

.title {
  margin: 18px 0;
  font-size: 5;
}

.title h2 {
  font-size: 2;
  font-weight: 600;
}

.standings-table {
  margin-bottom: 20px;
}

/* Align header text to the bottom */
.header,
.group-header {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.header {
  border-bottom-color: #555;
  font-size: 13px;
  font-weight: 400;
  text-transform: uppercase;
}

/* Highlight headers when sorting */
.header:hover,
.header[aria-sort="ascending"],
.header[aria-sort="descending"] {
  background-color: #eee;
}

.border-left {
  border-left: 2px solid #555;
}

/* Use box-shadow to create row borders that appear behind vertical borders */
.cell {
  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
}

.group-last .cell {
  box-shadow: inset 0 -2px 0 #555;
}

.team {
  display: flex;
  align-items: baseline;
}

.record {
  margin-left: 5px;
  color: #999;
  font-size: 13px;
}

.team-name {
  font-size: 18px;
  font-weight: 700;
}

.flag {
  margin-right: 8px;
  height: 21px;
  border: 1px solid #f0f0f0;
}

.group {
  font-size: 19px;
}

.number {
  font-family: "Fira Mono", Consolas, Monaco, monospace;
  font-size: 16px;
  line-height: 30px;
  white-space: pre;
}

.spi-rating {
  width: 20px;
  height: 20px;
  border: 1px solid rgba(0, 0, 0, 0.03);
  border-radius: 50%;
text-align: center;
  align-item: right;
   margin-left: 15px;
#  color: #000;
  font-size: 13px;
 # letter-spacing: -2px;
}
```


```{css echo=FALSE}
/* rmarkdown html documents */
.main-container {
  max-width: 1035px !important;
  font-family: 'Roboto', sans-serif;
  font-size: 10px;
    height: 20px;
}

h1.title {
  display: none;
}

/* pkgdown articles */
.contents {
  width: 1060px;
}

.page-header {
  display: none;
}
```
